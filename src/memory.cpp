#include <iostream>
#include "memory.h"
#include "chip8.h"

Memory::Memory()
{
	Initialize();
	InitFont();
}

Memory::~Memory()
{

}

void Memory::Initialize()
{
	std::cout << "Initializing new memory" << std::endl;
	stack.clear();
	stack.reserve(0xFFF);
	stack.resize(0xFFF);
	SP = 0x0;
	V0 = 0x0;
	V1 = 0x0;
	V2 = 0x0;
	V3 = 0x0;
	V4 = 0x0;
	V5 = 0x0;
	V6 = 0x0;
	V7 = 0x0;
	V8 = 0x0;
	V9 = 0x0;
	VA = 0x0;
	VB = 0x0;
	VC = 0x0;
	VD = 0x0;
	VE = 0x0;
	VF = 0x0;
	I = 0x00;
	PC = PROGRAM_START_ADDRESS;
}

void Memory::InitFont()
{
	std::vector<uint8_t> font = {
		0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
		0x20, 0x60, 0x20, 0x20, 0x70, // 1
		0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
		0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
		0x90, 0x90, 0xF0, 0x10, 0x10, // 4
		0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
		0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
		0xF0, 0x10, 0x20, 0x40, 0x40, // 7
		0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
		0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
		0xF0, 0x90, 0xF0, 0x90, 0x90, // A
		0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
		0xF0, 0x80, 0x80, 0x80, 0xF0, // C
		0xE0, 0x90, 0x90, 0x90, 0xE0, // D
		0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
		0xF0, 0x80, 0xF0, 0x80, 0x80  // F
	};
	for (int i = 0; i < font.size(); i++)
	{
		unsigned int addr = FONT_START_ADDRESS;
		stack[addr + i] = font[i];
	}
	//DebugPrintFont();
}

// print 4 bytes from stack at SP address for testing
void Memory::DebugPrintSP()
{
	for (int i = 0; i < 4; i++)
	{
		std::cout << Chip8::HexPrint(stack[PC + i]) << " ";
	}
	std::cout << std::endl;
}

// print first and last byte of font for testing
void Memory::DebugPrintFont()
{
	unsigned int startaddr = FONT_START_ADDRESS;
	unsigned int endaddr = FONT_END_ADDRESS;
	std::cout << Chip8::HexPrint(stack[startaddr]) << " ";
	std::cout << Chip8::HexPrint(stack[endaddr]) << " " << std::endl;
}
